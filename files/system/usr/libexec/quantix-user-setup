#!/usr/bin/bash

if [ "${EUID:-$(id -u)}" -eq 0 ]; then
  echo "Quantix user setup ran as root user. Exiting."
  exit 0
elif [ "$(whoami)" = "sddm" ]; then
  echo "Quantix user setup ran as sddm user. Exiting."
  exit 0
fi

# Script version
readonly QNTX_VER=11
readonly QNTX_VER_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/quantix"
readonly QNTX_VER_FILE="${QNTX_VER_DIR}/qntx_version"
QNTX_VER_RAN=""

mkdir -p "${QNTX_VER_DIR}" || { echo "Error creating directory ${QNTX_VER_DIR}." >&2; exit 1; }

if [[ -f "${QNTX_VER_FILE}" ]]; then
  QNTX_VER_RAN=$(cat "${QNTX_VER_FILE}")
fi

# Run script if it has been updated
if [[ -n "${QNTX_VER_RAN}" && "${QNTX_VER}" == "${QNTX_VER_RAN}" ]]; then
    echo "Quantix user setup has already run. Exiting..."
    exit 0
fi

dconf load / < /etc/dconf/db/local.d/13-quantix

cp /usr/share/applications/org.kde.konsole.desktop $HOME/.local/share/applications/org.kde.konsole.desktop
sed -i '/NoDisplay=true/d' $HOME/.local/share/applications/org.kde.konsole.desktop

# Setup JetBrains Toolbox
pushd "$(mktemp -d)"

# Get the json with latest releases
curl -sSfL -o releases.json "https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release"
BUILD_VERSION=$(jq -r '.TBA[0].build' ./releases.json)
DOWNLOAD_LINK=$(jq -r '.TBA[0].downloads.linux.link' ./releases.json)
CHECKSUM_LINK=$(jq -r '.TBA[0].downloads.linux.checksumLink' ./releases.json)

# Download and extract
curl -sSfL -O "${DOWNLOAD_LINK}"
curl -sSfL "${CHECKSUM_LINK}" | sha256sum -c
tar zxf jetbrains-toolbox-"${BUILD_VERSION}".tar.gz

# Launch
./jetbrains-toolbox-"${BUILD_VERSION}"/jetbrains-toolbox

# Write the version
echo "${QNTX_VER}" > "${QNTX_VER_FILE}" || { echo "Error writing to ${QNTX_VER_FILE}." >&2; exit 1; }